audio.c:		audio->nextEvent = audio->p->cpu->cycles >> audio->p->doubleSpeed;
audio.c:		audio->p->cpu->nextEvent = audio->p->cpu->cycles;
core.c:		cpu->components[CPU_COMPONENT_CHEAT_DEVICE] = NULL;
core.c:	} while (cpu->executionState != LR35902_CORE_FETCH);
core.c:	while (cpu->executionState != LR35902_CORE_FETCH) {
core.c:	return cpu->memory.load8(cpu, address);
core.c:	return cpu->memory.load8(cpu, address) | (cpu->memory.load8(cpu, address + 1) << 8);
core.c:	return cpu->memory.load8(cpu, address) | (cpu->memory.load8(cpu, address + 1) << 8) |
core.c:	       (cpu->memory.load8(cpu, address + 2) << 16) | (cpu->memory.load8(cpu, address + 3) << 24);
core.c:	cpu->memory.store8(cpu, address, value);
core.c:	cpu->memory.store8(cpu, address, value);
core.c:	cpu->memory.store8(cpu, address + 1, value >> 8);
core.c:	cpu->memory.store8(cpu, address, value);
core.c:	cpu->memory.store8(cpu, address + 1, value >> 8);
core.c:	cpu->memory.store8(cpu, address + 2, value >> 16);
core.c:	cpu->memory.store8(cpu, address + 3, value >> 24);
core.c:	cpu->components[CPU_COMPONENT_DEBUGGER] = &debugger->d;
core.c:	cpu->components[CPU_COMPONENT_DEBUGGER] = NULL;
gb.c:	GBInterruptHandlerInit(&gb->cpu->irqh);
gb.c:		cpu->memory.setActiveRegion(cpu, cpu->pc);
gb.c:	struct GB* gb = (struct GB*) cpu->master;
gb.c:			cpu->a = 0;
gb.c:			cpu->f.packed = 0;
gb.c:			cpu->c = 0;
gb.c:			cpu->e = 0;
gb.c:			cpu->h = 0;
gb.c:			cpu->l = 0;
gb.c:			cpu->sp = 0;
gb.c:			cpu->pc = 0;
gb.c:	cpu->b = 0;
gb.c:	cpu->d = 0;
gb.c:			cpu->a = 1;
gb.c:			cpu->f.packed = 0xB0;
gb.c:			cpu->c = 0x13;
gb.c:			cpu->e = 0xD8;
gb.c:			cpu->h = 1;
gb.c:			cpu->l = 0x4D;
gb.c:			cpu->b = 1;
gb.c:			cpu->a = 0x11;
gb.c:			cpu->f.packed = 0x80;
gb.c:			cpu->c = 0;
gb.c:			cpu->e = 0x08;
gb.c:			cpu->h = 0;
gb.c:			cpu->l = 0x7C;
gb.c:		cpu->sp = 0xFFFE;
gb.c:		cpu->pc = 0x100;
gb.c:	cpu->memory.setActiveRegion(cpu, cpu->pc);
gb.c:	gb->cpu->halted = false;
gb.c:	if (!gb->memory.ime || gb->cpu->irqPending) {
gb.c:	struct GB* gb = (struct GB*) cpu->master;
gb.c:		int32_t cycles = cpu->nextEvent;
gb.c:		cpu->cycles -= cycles;
gb.c:		cpu->nextEvent = nextEvent;
gb.c:		if (cpu->halted) {
gb.c:			cpu->cycles = cpu->nextEvent;
gb.c:	} while (cpu->cycles >= cpu->nextEvent);
gb.c:	struct GB* gb = (struct GB*) cpu->master;
gb.c:		if (cpu->nextEvent > cpu->cycles + 4) {
gb.c:			cpu->nextEvent = cpu->cycles + 4;
gb.c:		gb->eiPending = cpu->cycles + 4;
gb.c:	if (!cpu->irqPending) {
gb.c:		cpu->cycles = cpu->nextEvent;
gb.c:		cpu->halted = true;
gb.c:	struct GB* gb = (struct GB*) cpu->master;
gb.c:	if (cpu->bus) {
gb.c:		mLOG(GB, GAME_ERROR, "Hit illegal stop at address %04X:%02X\n", cpu->pc, cpu->bus);
gb.c:	} else if (cpu->bus) {
gb.c:		if (cpu->components && cpu->components[CPU_COMPONENT_DEBUGGER]) {
gb.c:				.address = cpu->pc - 1,
gb.c:				.opcode = 0x1000 | cpu->bus
gb.c:			mDebuggerEnter((struct mDebugger*) cpu->components[CPU_COMPONENT_DEBUGGER], DEBUGGER_ENTER_ILLEGAL_OP, &info);
gb.c:		cpu->pc -= 2;
gb.c:	struct GB* gb = (struct GB*) cpu->master;
gb.c:	mLOG(GB, GAME_ERROR, "Hit illegal opcode at address %04X:%02X\n", cpu->pc, cpu->bus);
gb.c:	if (cpu->components && cpu->components[CPU_COMPONENT_DEBUGGER]) {
gb.c:			.address = cpu->pc,
gb.c:			.opcode = cpu->bus
gb.c:		mDebuggerEnter((struct mDebugger*) cpu->components[CPU_COMPONENT_DEBUGGER], DEBUGGER_ENTER_ILLEGAL_OP, &info);
gb.c:	--cpu->pc;
gb.c:	if (gb->cpu->components && gb->cpu->components[CPU_COMPONENT_CHEAT_DEVICE]) {
gb.c:		struct mCheatDevice* device = (struct mCheatDevice*) gb->cpu->components[CPU_COMPONENT_CHEAT_DEVICE];
memory.c:	if (UNLIKELY(address > cpu->memory.activeRegionEnd)) {
memory.c:		cpu->memory.setActiveRegion(cpu, address);
memory.c:		return cpu->memory.cpuLoad8(cpu, address);
memory.c:	return cpu->memory.activeRegion[address & cpu->memory.activeMask];
memory.c:	struct GB* gb = (struct GB*) cpu->master;
memory.c:		cpu->memory.cpuLoad8 = GBFastLoad8;
memory.c:		cpu->memory.activeRegion = memory->romBase;
memory.c:		cpu->memory.activeRegionEnd = GB_BASE_CART_BANK1;
memory.c:		cpu->memory.activeMask = GB_SIZE_CART_BANK0 - 1;
memory.c:		cpu->memory.cpuLoad8 = GBFastLoad8;
memory.c:		cpu->memory.activeRegion = memory->romBank;
memory.c:		cpu->memory.activeRegionEnd = GB_BASE_VRAM;
memory.c:		cpu->memory.activeMask = GB_SIZE_CART_BANK0 - 1;
memory.c:		cpu->memory.cpuLoad8 = GBLoad8;
memory.c:	cpu->memory.cpuLoad8 = GBLoad8;
memory.c:	cpu->memory.load8 = GBLoad8;
memory.c:	cpu->memory.store8 = GBStore8;
memory.c:	cpu->memory.setActiveRegion = GBSetActiveRegion;
memory.c:	struct GB* gb = (struct GB*) cpu->master;
memory.c:	struct GB* gb = (struct GB*) cpu->master;
memory.c:		cpu->memory.setActiveRegion(cpu, cpu->pc);
memory.c:	struct GB* gb = (struct GB*) cpu->master;
memory.c:	gb->cpu->memory.store8 = GBDMAStore8;
memory.c:	gb->cpu->memory.load8 = GBDMALoad8;
memory.c:	gb->cpu->memory.cpuLoad8 = GBDMALoad8;
memory.c:	gb->memory.dmaNext = gb->cpu->cycles + 8;
memory.c:	if (gb->memory.dmaNext < gb->cpu->nextEvent) {
memory.c:		gb->cpu->nextEvent = gb->memory.dmaNext;
memory.c:		gb->memory.hdmaNext = gb->cpu->cycles;
memory.c:		gb->cpu->nextEvent = gb->cpu->cycles;
memory.c:		gb->cpu->memory.store8 = GBStore8;
memory.c:		gb->cpu->memory.load8 = GBLoad8;
memory.c:	uint8_t b = gb->cpu->memory.load8(gb->cpu, gb->memory.hdmaSource);
memory.c:	gb->cpu->memory.store8(gb->cpu, gb->memory.hdmaDest, b);
memory.c:	gb->cpu->cycles += 2;
memory.c:	struct GB* gb = (struct GB*) cpu->master;
memory.c:	struct GB* gb = (struct GB*) cpu->master;
memory.c:	struct GB* gb = (struct GB*) cpu->master;
serialize.c:	state->cpu.a = gb->cpu->a;
serialize.c:	state->cpu.f = gb->cpu->f.packed;
serialize.c:	state->cpu.b = gb->cpu->b;
serialize.c:	state->cpu.c = gb->cpu->c;
serialize.c:	state->cpu.d = gb->cpu->d;
serialize.c:	state->cpu.e = gb->cpu->e;
serialize.c:	state->cpu.h = gb->cpu->h;
serialize.c:	state->cpu.l = gb->cpu->l;
serialize.c:	STORE_16LE(gb->cpu->sp, 0, &state->cpu.sp);
serialize.c:	STORE_16LE(gb->cpu->pc, 0, &state->cpu.pc);
serialize.c:	STORE_32LE(gb->cpu->cycles, 0, &state->cpu.cycles);
serialize.c:	STORE_32LE(gb->cpu->nextEvent, 0, &state->cpu.nextEvent);
serialize.c:	STORE_16LE(gb->cpu->index, 0, &state->cpu.index);
serialize.c:	state->cpu.bus = gb->cpu->bus;
serialize.c:	state->cpu.executionState = gb->cpu->executionState;
serialize.c:	STORE_16LE(gb->cpu->irqVector, 0, &state->cpu.irqVector);
serialize.c:	flags = GBSerializedCpuFlagsSetCondition(flags, gb->cpu->condition);
serialize.c:	flags = GBSerializedCpuFlagsSetIrqPending(flags, gb->cpu->irqPending);
serialize.c:	gb->cpu->a = state->cpu.a;
serialize.c:	gb->cpu->f.packed = state->cpu.f;
serialize.c:	gb->cpu->b = state->cpu.b;
serialize.c:	gb->cpu->c = state->cpu.c;
serialize.c:	gb->cpu->d = state->cpu.d;
serialize.c:	gb->cpu->e = state->cpu.e;
serialize.c:	gb->cpu->h = state->cpu.h;
serialize.c:	gb->cpu->l = state->cpu.l;
serialize.c:	LOAD_16LE(gb->cpu->sp, 0, &state->cpu.sp);
serialize.c:	LOAD_16LE(gb->cpu->pc, 0, &state->cpu.pc);
serialize.c:	LOAD_16LE(gb->cpu->index, 0, &state->cpu.index);
serialize.c:	gb->cpu->bus = state->cpu.bus;
serialize.c:	gb->cpu->executionState = state->cpu.executionState;
serialize.c:	LOAD_16LE(gb->cpu->irqVector, 0, &state->cpu.irqVector);
serialize.c:	gb->cpu->condition = GBSerializedCpuFlagsGetCondition(flags);
serialize.c:	gb->cpu->irqPending = GBSerializedCpuFlagsGetIrqPending(flags);
serialize.c:	LOAD_32LE(gb->cpu->cycles, 0, &state->cpu.cycles);
serialize.c:	LOAD_32LE(gb->cpu->nextEvent, 0, &state->cpu.nextEvent);
serialize.c:	gb->cpu->memory.setActiveRegion(gb->cpu, gb->cpu->pc);
sio.c:			sio->nextEvent = sio->p->cpu->cycles + sio->period;
timer.c:	timer->nextDiv = timer->p->cpu->cycles + GB_DMG_DIV_PERIOD;
timer.c:	if (timer->nextDiv < timer->p->cpu->nextEvent) {
timer.c:		timer->p->cpu->nextEvent = timer->nextDiv;
video.c:					video->p->memory.hdmaNext = video->p->cpu->cycles;
video.c:			if (video->p->cpu->executionState == LR35902_CORE_FETCH) {
video.c:				video->nextFrame = 4 - ((video->p->cpu->executionState + 1) & 3);
video.c:	video->x = video->dotCounter + video->eventDiff + (video->p->cpu->cycles >> video->p->doubleSpeed);
video.c:		video->eventDiff = -video->p->cpu->cycles >> video->p->doubleSpeed;
video.c:		if (video->p->cpu->cycles + (video->nextEvent << video->p->doubleSpeed) < video->p->cpu->nextEvent) {
video.c:			video->p->cpu->nextEvent = video->p->cpu->cycles + (video->nextEvent << video->p->doubleSpeed);
